# bot.py
import json
import os
from pathlib import Path
from typing import Dict, Any

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from aiogram.types.input_file import FSInputFile  # –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ (aiogram v3)

# ---------- Files & ENV ----------
BASE_DIR = Path(__file__).parent
BANNER_PATH = BASE_DIR / "assets" / "banner.png"
DATA_JSON   = BASE_DIR / "data.json"
CHANNEL_URL = os.getenv("CHANNEL_URL")  # –Ω–∞–ø—Ä.: https://t.me/your_channel

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ñ–π –ø–∞–º'—è—Ç—ñ (—Å–∫–∏–¥–∞—î—Ç—å—Å—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç—ñ –ø—Ä–æ—Ü–µ—Å—É)
USER_LANG: Dict[int, str] = {}  # 'ru' | 'ka' | 'en'

# ---------- –¢–µ–∫—Å—Ç–∏ –¥–ª—è RU / KA / EN ----------
TXT = {
    "ru": {
        "start_caption": (
            "–ê–≤—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏–∑ –°–®–ê –≤ –ì—Ä—É–∑–∏—é ‚Äî –±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ üö¢üá∫üá∏\n"
            "–ú–∞—à–∏–Ω—ã, —Å–∫—É—Ç–µ—Ä—ã, –∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n\n"
            "–í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ üì≤\n"
            "–ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è"
        ),
        "menu_contacts": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "menu_lang": "üîÅ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "menu_back_channel": "üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª",

        "contacts_title": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:",
        "contacts_phone": "–¢–µ–ª–µ—Ñ–æ–Ω",

        "lang_prompt": "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        "lang_set": "–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π üá∑üá∫",

        "open_channel_text": "–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ! üì®",
        "open_channel_btn": "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª ‚ÜóÔ∏è",
        "no_channel": "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.",

        "placeholder": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç...",
    },
    "ka": {
        "start_caption": (
            "·Éê·Éï·É¢·Éù·É¢·Éî·É•·Éú·Éò·Éô·Éê ·Éê·É®·É®-·Éì·Éê·Éú ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É®·Éò ‚Äî ·É°·É¨·É†·Éê·É§·Éê·Éì ·Éì·Éê ·É°·Éê·Éò·Éõ·Éî·Éì·Éù·Éì üö¢üá∫üá∏\n"
            "·Éê·Éï·É¢·Éù·Éõ·Éù·Éë·Éò·Éö·Éî·Éë·Éò, ·É°·Éô·É£·É¢·Éî·É†·Éî·Éë·Éò, ·Éô·Éï·Éê·Éì·É†·Éù·É™·Éò·Éô·Éö·Éî·Éë·Éò ·Éì·Éê ·Éë·Éî·Éï·É†·Éò ·É°·ÉÆ·Éï·Éê.\n\n"
            "·Éß·Éï·Éî·Éö·Éê ·É®·Éî·Éó·Éê·Éï·Éê·Éñ·Éî·Éë·Éê ·Éò·ÉÆ·Éò·Éö·Éî·Éó ·É©·Éï·Éî·Éú·É° ·Éê·É†·ÉÆ·É®·Éò üì≤\n"
            "·Éì·Éê·Éê·É≠·Éò·É†·Éî·Éó ·É¶·Éò·Éö·Éê·Éô·É° ·É•·Éï·Éî·Éõ·Éù·Éó ‚¨áÔ∏è"
        ),
        "menu_contacts": "üìû ·Éô·Éù·Éú·É¢·Éê·É•·É¢·Éî·Éë·Éò",
        "menu_lang": "üîÅ ·Éî·Éú·Éò·É° ·É®·Éî·É™·Éï·Éö·Éê",
        "menu_back_channel": "üîô ·Éê·É†·ÉÆ·Éñ·Éî ·Éì·Éê·Éë·É†·É£·Éú·Éî·Éë·Éê",

        "contacts_title": "üìû ·Éô·Éù·Éú·É¢·Éê·É•·É¢·Éî·Éë·Éò:",
        "contacts_phone": "·É¢·Éî·Éö·Éî·É§·Éù·Éú·Éò",

        "lang_prompt": "üåê ·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éò·Éú·É¢·Éî·É†·É§·Éî·Éò·É°·Éò·É° ·Éî·Éú·Éê:",
        "lang_set": "·Éî·Éú·Éê ·Éí·Éê·Éì·Éê·Éî·É†·Éó·Éù ·É•·Éê·É†·Éó·É£·Éö·Éñ·Éî üá¨üá™",

        "open_channel_text": "·É°·Éò·ÉÆ·Éê·É†·É£·Éö·Éò·Éó ·Éì·Éê·Éí·Éò·Éú·Éê·ÉÆ·Éê·Éï·Éó ·É©·Éï·Éî·Éú·É° ·Éê·É†·ÉÆ·É®·Éò! üì®",
        "open_channel_btn": "·Éê·É†·ÉÆ·É®·Éò ·Éí·Éê·Éì·Éê·É°·Éï·Éö·Éê ‚ÜóÔ∏è",
        "no_channel": "·Éê·É†·ÉÆ·Éò·É° ·Éë·Éõ·É£·Éö·Éò ·ÉØ·Éî·É† ·Éê·É† ·Éê·É†·Éò·É° ·Éõ·Éò·Éó·Éò·Éó·Éî·Éë·É£·Éö·Éò.",

        "placeholder": "·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éû·É£·Éú·É•·É¢·Éò...",
    },
    "en": {
        "start_caption": (
            "We deliver vehicles & power sports from the USA to Georgia ‚Äî fast and reliable üö¢üá∫üá∏\n"
            "Cars, jet skis, ATVs and more.\n\n"
            "See all offers in our channel üì≤\n"
            "Choose an option below ‚¨áÔ∏è"
        ),
        "menu_contacts": "üìû Contacts",
        "menu_lang": "üîÅ Change language",
        "menu_back_channel": "üîô Back to channel",

        "contacts_title": "üìû Contacts:",
        "contacts_phone": "Phone",

        "lang_prompt": "üåê Choose interface language:",
        "lang_set": "Language switched to English üá¨üáß",

        "open_channel_text": "We‚Äôll be glad to see you in our channel! üì®",
        "open_channel_btn": "Open channel ‚ÜóÔ∏è",
        "no_channel": "Channel link is not configured yet.",

        "placeholder": "Choose an option...",
    },
}

LABELS = {
    "contacts":     {"ru": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",      "ka": "üìû ·Éô·Éù·Éú·É¢·Éê·É•·É¢·Éî·Éë·Éò",       "en": "üìû Contacts"},
    "lang":         {"ru": "üîÅ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",  "ka": "üîÅ ·Éî·Éú·Éò·É° ·É®·Éî·É™·Éï·Éö·Éê",      "en": "üîÅ Change language"},
    "back_channel": {"ru": "üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª", "ka": "üîô ·Éê·É†·ÉÆ·Éñ·Éî ·Éì·Éê·Éë·É†·É£·Éú·Éî·Éë·Éê",  "en": "üîô Back to channel"},
}

def norm_lang(code: str) -> str:
    return code if code in ("ru", "ka", "en") else "ru"

def lang_of(uid: int) -> str:
    return USER_LANG.get(uid, "ru")

def set_lang(uid: int, code: str) -> str:
    code = norm_lang(code)
    USER_LANG[uid] = code
    return code

def read_contacts() -> Dict[str, Any]:
    """–ó—á–∏—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑ data.json. –î–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–ª—è 'phone' (—Ä—è–¥–æ–∫ –∞–±–æ –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤)."""
    try:
        data = json.loads(DATA_JSON.read_text(encoding="utf-8"))
        if not isinstance(data, dict):
            raise ValueError
        return {
            "phone": data.get("phone", "‚Äî"),
        }
    except Exception:
        return {"phone": "‚Äî"}

def make_main_kb(lang: str) -> ReplyKeyboardMarkup:
    lang = norm_lang(lang)
    t = TXT[lang]
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=LABELS["contacts"][lang])],
            [KeyboardButton(text=LABELS["lang"][lang])],
            [KeyboardButton(text=LABELS["back_channel"][lang])],
        ],
        resize_keyboard=True,
        input_field_placeholder=t["placeholder"],
    )

def make_lang_choice_kb() -> InlineKeyboardMarkup:
    # –Ü–Ω–ª–∞–π–Ω-–≤–∏–±—ñ—Ä –º–æ–≤–∏: RU / KA / EN
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫",  callback_data="setlang:ru"),
            InlineKeyboardButton(text="·É•·Éê·É†·Éó·É£·Éö·Éò üá¨üá™", callback_data="setlang:ka"),
            InlineKeyboardButton(text="English üá¨üáß", callback_data="setlang:en"),
        ]]
    )

router = Router()

# ---------- Handlers ----------

@router.message(CommandStart())
async def on_start(message: Message):
    uid = message.from_user.id
    lang = lang_of(uid)
    kb = make_main_kb(lang)

    # –ë–∞–Ω–µ—Ä + –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    if BANNER_PATH.exists():
        photo = FSInputFile(str(BANNER_PATH))
        await message.answer_photo(photo=photo, caption=TXT[lang]["start_caption"], reply_markup=kb)
    else:
        await message.answer(TXT[lang]["start_caption"], reply_markup=kb)

@router.message(Command("ping"))
async def on_ping(message: Message):
    await message.answer("pong")

@router.message(F.text.in_({LABELS["contacts"]["ru"], LABELS["contacts"]["ka"], LABELS["contacts"]["en"]}))
async def on_contacts(message: Message):
    """–ü–æ–∫–∞–∑—É—î–º–æ –ª–∏—à–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –∑ data.json (–±–µ–∑ email —Ç–∞ –∞–¥—Ä–µ—Å–∏)."""
    uid = message.from_user.id
    lang = lang_of(uid)
    t = TXT[lang]
    c = read_contacts()

    text = f"{t['contacts_title']}\n‚Ä¢ {t['contacts_phone']}: {c['phone']}"
    await message.answer(text, reply_markup=make_main_kb(lang))

@router.message(F.text.in_({LABELS["lang"]["ru"], LABELS["lang"]["ka"], LABELS["lang"]["en"]}))
async def on_change_lang(message: Message):
    uid = message.from_user.id
    lang = lang_of(uid)
    await message.answer(TXT[lang]["lang_prompt"], reply_markup=make_lang_choice_kb())

@router.callback_query(F.data.startswith("setlang:"))
async def on_set_lang(call: CallbackQuery):
    uid = call.from_user.id
    _, code = call.data.split(":", 1)
    new_lang = set_lang(uid, code)

    await call.message.answer(TXT[new_lang]["lang_set"], reply_markup=make_main_kb(new_lang))
    await call.answer()

@router.message(F.text.in_({LABELS["back_channel"]["ru"], LABELS["back_channel"]["ka"], LABELS["back_channel"]["en"]}))
async def on_back_channel(message: Message):
    lang = lang_of(message.from_user.id)
    if CHANNEL_URL:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=TXT[lang]["open_channel_btn"], url=CHANNEL_URL)]]
        )
        await message.answer(TXT[lang]["open_channel_text"], reply_markup=kb)
    else:
        await message.answer(TXT[lang]["no_channel"], reply_markup=make_main_kb(lang))

# –Ü–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –ø–æ–≤–Ω–∞ —Ç–∏—à–∞
@router.message()
async def _noop(_msg: Message):
    pass
