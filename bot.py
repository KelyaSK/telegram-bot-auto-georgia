# -*- coding: utf-8 -*-
import json
import logging
from pathlib import Path
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# ---------------------------
# –¢–í–û–á –°–ï–ö–†–ï–¢–ò (–ø—ñ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä—è–º–æ –≤ –∫–æ–¥)
# ---------------------------
BOT_TOKEN = "–¢–£–¢_–¢–í–Ü–ô_–¢–û–ö–ï–ù_–í–Ü–î_BOTFATHER"
CHANNEL_URL = "https://t.me/your_channel_username"

# ---------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# ---------------------------
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

DATA_FILE = Path(__file__).parent / "data.json"

def load_contacts():
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"))
    kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª"))
    return kb

def back_inline_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_URL))
    return kb

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üëá"
    )
    await message.answer(text, reply_markup=main_menu())

@dp.message_handler(lambda m: "–∫–æ–Ω—Ç–∞–∫—Ç–∏" in m.text.lower())
async def show_contacts(message: types.Message):
    data = load_contacts()
    text = "<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</b>\n\n"
    for item in data.get("items", []):
        name, value = item.get("name"), item.get("value")
        url = item.get("url")
        if url:
            text += f"‚Ä¢ <b>{name}:</b> <a href='{url}'>{value}</a>\n"
        else:
            text += f"‚Ä¢ <b>{name}:</b> {value}\n"
    await message.answer(text, reply_markup=main_menu(), disable_web_page_preview=True)

@dp.message_handler(lambda m: "–Ω–∞–∑–∞–¥" in m.text.lower())
async def back_to_channel(message: types.Message):
    await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è —É –∫–∞–Ω–∞–ª:", reply_markup=back_inline_kb())

@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É üëá", reply_markup=main_menu())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
