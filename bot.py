import os
import json
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# ===== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====
# –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–û: –∑—á–∏—Ç—É–≤–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ ENV (—â–æ–± –Ω–µ —Å–≤—ñ—Ç–∏–≤—Å—è —É –∫–æ–¥—ñ).
# –Ø–∫—â–æ ENV –Ω–µ–º–∞—î ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Ç–æ–∫–µ–Ω —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç.
API_TOKEN = os.getenv("BOT_TOKEN", "7583570411:AAF3hU0M0f1o0YR4ywQa68S_U-q8LAdkCL4")

# –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª: –±–µ—Ä–µ–º–æ –∑ data.json, –∞–ª–µ —Ç–∞–∫–æ–∂ –¥–æ–∑–≤–æ–ª—è—î–º–æ ENV —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
CHANNEL_URL_ENV = os.getenv("CHANNEL_URL", "")

# ===== –õ–û–ì–£–í–ê–ù–ù–Ø =====
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
logger = logging.getLogger("bot")

# ===== –®–õ–Ø–• –î–û data.json (–Ω–∞–¥—ñ–π–Ω–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–∏–π) =====
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_FILE = os.path.join(BASE_DIR, "data.json")

def load_data():
    """–ß–∏—Ç–∞—î data.json —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫. –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è."""
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        if "contacts" not in data or not isinstance(data["contacts"], dict):
            raise ValueError("–£ data.json –Ω–µ–º–∞—î –æ–±'—î–∫—Ç–∞ 'contacts'")
        return data
    except Exception as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {DATA_FILE}: {e}")
        return {
            "channel_link": "https://t.me/YourChannel",
            "contacts": {"phone": "‚Äî", "email": "‚Äî", "address": "‚Äî"}
        }

# ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–û–¢–ê =====
if not API_TOKEN:
    raise SystemExit("ENV BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# ===== –ö–õ–ê–í–Ü–ê–¢–£–†–ê –ó –ö–ù–û–ü–ö–ê–ú–ò =====
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"))
    kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª"))
    return kb

# ===== –•–ï–ù–î–õ–ï–†–ò =====
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.reply("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá", reply_markup=main_menu())

@dp.message_handler(lambda m: (m.text or "").strip() in ["üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏", "–ö–æ–Ω—Ç–∞–∫—Ç–∏", "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"])
async def show_contacts(message: types.Message):
    data = load_data()
    c = data.get("contacts", {})
    phone = c.get("phone", "‚Äî")
    email = c.get("email", "‚Äî")
    address = c.get("address", "‚Äî")

    text = (
        "<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</b>\n\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <a href='tel:{phone}'>{phone}</a>\n"
        f"üìß Email: <a href='mailto:{email}'>{email}</a>\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {address}"
    )
    await message.answer(text, disable_web_page_preview=True)

@dp.message_handler(lambda m: (m.text or "").strip() == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª")
async def back_to_channel(message: types.Message):
    data = load_data()
    link = data.get("channel_link") or CHANNEL_URL_ENV or "https://t.me/YourChannel"
    await message.answer(f"üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª: {link}")

# ===== –ó–ê–ü–£–°–ö =====
if __name__ == "__main__":
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞... DATA_FILE = {DATA_FILE}")
    executor.start_polling(dp, skip_updates=True)
