import os
import json
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# ---------- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ----------
# –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–û: –≤–∑—è—Ç–∏ –∑ ENV (Render)
API_TOKEN = os.getenv("BOT_TOKEN", "7583570411:AAF3hU0M0f1o0YR4ywQa68S_U-q8LAdkCL4")
# fallback –Ω–∞ data.json -> channel_link; —Ü–µ –ª–∏—à —Ä–µ–∑–µ—Ä–≤:
CHANNEL_URL_ENV = os.getenv("CHANNEL_URL", "")

# (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ) Admin ID –¥–ª—è /set_* –∫–æ–º–∞–Ω–¥
ADMIN_ID = os.getenv("ADMIN_ID")  # —á–∏—Å–ª–æ–≤–∏–π Telegram ID
ADMINS = {int(ADMIN_ID)} if ADMIN_ID and ADMIN_ID.isdigit() else set()

# ---------- –õ–û–ì–£–í–ê–ù–ù–Ø ----------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------- –î–ê–ù–Ü ----------
DATA_FILE = "data.json"

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.exception("–ù–µ –≤–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ data.json")
        return {
            "channel_link": "https://t.me/YourChannel",
            "contacts": {"phone": "-", "email": "-", "address": "-"}
        }

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# ---------- –ë–û–¢ ----------
if not API_TOKEN:
    logger.error("ENV BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    raise SystemExit(1)

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"))
    kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª"))
    return kb

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.reply(
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá",
        reply_markup=main_menu()
    )

@dp.message_handler(lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
async def show_contacts(message: types.Message):
    data = load_data()
    c = data.get("contacts", {})
    phone = c.get("phone", "‚Äî")
    email = c.get("email", "‚Äî")
    address = c.get("address", "‚Äî")

    text = (
        f"<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</b>\n\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <a href='tel:{phone}'>{phone}</a>\n"
        f"üìß Email: <a href='mailto:{email}'>{email}</a>\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {address}"
    )
    await message.answer(text, disable_web_page_preview=True)

@dp.message_handler(lambda m: m.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª")
async def back_to_channel(message: types.Message):
    data = load_data()
    link = data.get("channel_link") or CHANNEL_URL_ENV or "https://t.me/YourChannel"
    await message.answer(f"üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª: {link}")

# ------ –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ) ------
def is_admin(uid: int) -> bool:
    return uid in ADMINS if ADMINS else False

@dp.message_handler(commands=["set_phone"])
async def set_phone(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.")
    try:
        new = message.text.split(" ", 1)[1].strip()
    except IndexError:
        return await message.reply("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /set_phone +995555123456")
    data = load_data()
    data["contacts"]["phone"] = new
    save_data(data)
    await message.reply(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ: {new}")

@dp.message_handler(commands=["set_email"])
async def set_email(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.")
    try:
        new = message.text.split(" ", 1)[1].strip()
    except IndexError:
        return await message.reply("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /set_email name@mail.com")
    data = load_data()
    data["contacts"]["email"] = new
    save_data(data)
    await message.reply(f"‚úÖ Email –æ–Ω–æ–≤–ª–µ–Ω–æ: {new}")

@dp.message_handler(commands=["set_address"])
async def set_address(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.")
    try:
        new = message.text.split(" ", 1)[1].strip()
    except IndexError:
        return await message.reply("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /set_address –ú—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è 1")
    data = load_data()
    data["contacts"]["address"] = new
    save_data(data)
    await message.reply(f"‚úÖ –ê–¥—Ä–µ—Å—É –æ–Ω–æ–≤–ª–µ–Ω–æ: {new}")

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ...")
    executor.start_polling(dp, skip_updates=True)
