# -*- coding: utf-8 -*-
import os
import json
import logging
from pathlib import Path

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –õ–æ–∫–∞–ª—å–Ω–æ –ø–æ–¥—Ö–≤–∞—Ç–∏–º .env, –µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (python-dotenv –≤ requirements)
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

# -------- –°–ï–ö–†–ï–¢–´ –ò–ó –û–ö–†–£–ñ–ï–ù–ò–Ø --------
BOT_TOKEN   = os.getenv("BOT_TOKEN")
CHANNEL_URL = os.getenv("CHANNEL_URL", "").strip()

if not BOT_TOKEN:
    raise SystemExit("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env (–ª–æ–∫–∞–ª—å–Ω–æ) –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞ Render).")

if not CHANNEL_URL:
    logging.warning("‚ö†Ô∏è CHANNEL_URL –Ω–µ –∑–∞–¥–∞–Ω. –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç https://t.me/")
    CHANNEL_URL = "https://t.me/"

# -------- –õ–û–ì–ò --------
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
logger = logging.getLogger("bot")

# -------- –ü–£–¢–ò --------
BASE_DIR = Path(__file__).parent
DATA_FILE = BASE_DIR / "data.json"

# -------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø --------
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# -------- –ö–õ–ê–í–ò–ê–¢–£–†–´ --------
def main_menu() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"))
    kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª"))
    return kb

def back_inline_kb(url: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª", url=url))
    return kb

# -------- –†–ê–ë–û–¢–ê –° data.json --------
def load_contacts() -> dict:
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        title = data.get("title", "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        items = data.get("items", [])
        return {"title": title, "items": items}
    except Exception as e:
        logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {DATA_FILE}: {e}")
        return {"title": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "items": []}

def render_contacts_text(data: dict) -> str:
    lines = [f"<b>{data.get('title','–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')}</b>", ""]
    for item in data.get("items", []):
        name = item.get("name", "")
        value = item.get("value", "")
        url = item.get("url")
        if not name and not value:
            continue
        if url:
            lines.append(f"‚Ä¢ <b>{name}:</b> <a href='{url}'>{value or url}</a>")
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω, —Å–¥–µ–ª–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º tel:
            if name.lower().startswith("—Ç–µ–ª") and value:
                lines.append(f"‚Ä¢ <b>{name}:</b> <a href='tel:{value}'>{value}</a>")
            else:
                lines.append(f"‚Ä¢ <b>{name}:</b> {value}")
    return "\n".join(lines)

# -------- –•–ï–ù–î–õ–ï–†–´ --------
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üëá"
    )
    await message.answer(text, reply_markup=main_menu())

# –õ–æ–≤–∏–º –ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ —Å ¬´–∫–æ–Ω—Ç–∞–∫—Ç¬ª
@dp.message_handler(lambda m: m.text and "–∫–æ–Ω—Ç–∞–∫—Ç" in m.text.lower())
async def show_contacts(message: types.Message):
    data = load_contacts()
    await message.answer(render_contacts_text(data), reply_markup=main_menu(), disable_web_page_preview=True)

# –õ–æ–≤–∏–º ¬´–Ω–∞–∑–∞–¥¬ª
@dp.message_handler(lambda m: m.text and "–Ω–∞–∑–∞–¥" in m.text.lower())
async def back_to_channel(message: types.Message):
    await message.answer("üîô –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª:", reply_markup=back_inline_kb(CHANNEL_URL))

# –§–æ–ª–±–µ–∫
@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ üëá", reply_markup=main_menu())

# -------- –ó–ê–ü–£–°–ö --------
if __name__ == "__main__":
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling)‚Ä¶")
    executor.start_polling(dp, skip_updates=True)
