# bot.py
import json
from pathlib import Path

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ---
MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton(text="üîÅ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç...",
)

# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ä–æ—É—Ç–µ—Ä ‚Äî –π–æ–≥–æ –ø—ñ–¥—Ö–æ–ø–ª—é—î server.py
router = Router()

def read_contacts() -> dict:
    """–ß–∏—Ç–∞—î –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∑ data.json –ø–æ—Ä—É—á —ñ–∑ —Ñ–∞–π–ª–æ–º."""
    data_path = Path(__file__).parent / "data.json"
    try:
        with data_path.open("r", encoding="utf-8") as f:
            data = json.load(f)
            if not isinstance(data, dict):
                raise ValueError("data.json must contain a JSON object")
            return {
                "phone": data.get("phone", "‚Äî"),
                "email": data.get("email", "‚Äî"),
                "address": data.get("address", "‚Äî"),
            }
    except Exception:
        return {"phone": "‚Äî", "email": "‚Äî", "address": "‚Äî"}

@router.message(Command("ping"))
async def ping(message: Message):
    await message.answer("pong")

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá",
        reply_markup=MAIN_KB,
    )

@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: Message):
    info = read_contacts()
    await message.answer(
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {info['phone']}\n"
        f"‚Ä¢ Email: {info['email']}\n"
        f"‚Ä¢ –ê–¥—Ä–µ—Å: {info['address']}",
        reply_markup=MAIN_KB,
    )

@router.message(F.text == "üîÅ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")
async def change_lang(message: Message):
    await message.answer(
        "–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ä—É—Å—Å–∫–∏–π. –í–µ—Ä—Å–∏—è –Ω–∞ ·É•·Éê·É†·Éó·É£·Éö ‚Äî –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üôÇ",
        reply_markup=MAIN_KB,
    )

@router.message()
async def fallback(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ", reply_markup=MAIN_KB)
