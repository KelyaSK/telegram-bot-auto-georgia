# bot.py
import json
import os
from pathlib import Path
from typing import Dict, Any

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
)

# ====== –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ / ENV ======
BASE_DIR = Path(__file__).parent
BANNER_PATH = BASE_DIR / "assets" / "banner.png"
DATA_JSON = BASE_DIR / "data.json"
CHANNEL_URL = os.getenv("CHANNEL_URL")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://t.me/your_channel

# –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π ¬´—Å—Ç–∞–Ω¬ª –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø–∞–º‚Äô—è—Ç—å —É RAM; –ø—ñ—Å–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç—É –∑–±–∏–≤–∞—î—Ç—å—Å—è)
# RU –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º; 'ru' –∞–±–æ 'ka'
USER_LANG: Dict[int, str] = {}

# ====== –¢–µ–∫—Å—Ç–∏ RU/KA ======
TXT = {
    "ru": {
        "start_caption": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ù–∞–∂–º–∏—Ç–µ ¬´/start¬ª –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ø–æ–º–æ—â—å –ø–æ –∞–≤—Ç–æ üöó",
        "menu_contacts": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "menu_lang": "üîÅ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "menu_back_channel": "üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª",
        "contacts_title": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:",
        "contacts_phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
        "contacts_email": "Email",
        "contacts_addr": "–ê–¥—Ä–µ—Å",
        "lang_switched": "–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ ·É•·Éê·É†·Éó·É£·Éö·Éò.",
        "open_channel": "–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª",
        "no_channel": "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.",
        "catalog_empty": "–ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç.",
        "ignored": "",  # –Ω—ñ—á–æ–≥–æ –Ω–µ —à–ª–µ–º–æ
    },
    "ka": {
        "start_caption": "üëã ·Éõ·Éù·Éí·Éî·É°·Éê·Éö·Éõ·Éî·Éë·Éò·Éó!\n·Éì·Éê·Éê·É≠·Éò·É†·Éî·Éó ¬´/start¬ª ·Éì·Éê ·Éõ·Éò·Éò·É¶·Éî·Éó ·Éô·Éù·Éú·É¢·Éê·É•·É¢·Éî·Éë·Éò ·Éì·Éê ·Éì·Éê·ÉÆ·Éõ·Éê·É†·Éî·Éë·Éê ·Éê·Éï·É¢·Éù·Éõ·Éù·Éë·Éò·Éö·Éî·Éë·Éñ·Éî üöó",
        "menu_contacts": "üìû ·Éô·Éù·Éú·É¢·Éê·É•·É¢·Éî·Éë·Éò",
        "menu_lang": "üîÅ ·Éî·Éú·Éò·É° ·É®·Éî·É™·Éï·Éö·Éê",
        "menu_back_channel": "üîô ·Éê·É†·ÉÆ·Éñ·Éî ·Éì·Éê·Éë·É†·É£·Éú·Éî·Éë·Éê",
        "contacts_title": "üìû ·Éô·Éù·Éú·É¢·Éê·É•·É¢·Éî·Éë·Éò:",
        "contacts_phone": "·É¢·Éî·Éö·Éî·É§·Éù·Éú·Éò",
        "contacts_email": "·Éò·Éõ·Éî·Éò·Éö·Éò",
        "contacts_addr": "·Éõ·Éò·É°·Éê·Éõ·Éê·É†·Éó·Éò",
        "lang_switched": "·Éî·Éú·Éê ·É®·Éî·Éò·É™·Éï·Éê·Éö·Éê ·É†·É£·É°·É£·Éö·Éñ·Éî.",
        "open_channel": "·Éê·É†·ÉÆ·Éò·É° ·Éí·Éê·ÉÆ·É°·Éú·Éê",
        "no_channel": "·Éê·É†·ÉÆ·Éò·É° ·Éë·Éõ·É£·Éö·Éò ·Éê·É† ·Éê·É†·Éò·É° ·Éõ·Éò·Éó·Éò·Éó·Éî·Éë·É£·Éö·Éò.",
        "catalog_empty": "·Éô·Éê·É¢·Éê·Éö·Éù·Éí·Éò ·Éì·É†·Éù·Éî·Éë·Éò·Éó ·É™·Éê·É†·Éò·Éî·Éö·Éò·Éê.",
        "ignored": "",
    },
}

# –î–ª—è –º–∞—Ç—á—ñ–≤ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–π–º–µ–º–æ –æ–±–∏–¥–≤—ñ –º–æ–≤–∏
LABELS = {
    "contacts": {"ru": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "ka": "üìû ·Éô·Éù·Éú·É¢·Éê·É•·É¢·Éî·Éë·Éò"},
    "lang": {"ru": "üîÅ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "ka": "üîÅ ·Éî·Éú·Éò·É° ·É®·Éî·É™·Éï·Éö·Éê"},
    "back_channel": {"ru": "üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª", "ka": "üîô ·Éê·É†·ÉÆ·Éñ·Éî ·Éì·Éê·Éë·É†·É£·Éú·Éî·Éë·Éê"},
}

def lang_of(user_id: int) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—É –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ('ru'|'ka'). –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º RU."""
    return USER_LANG.get(user_id, "ru")

def toggle_lang(user_id: int) -> str:
    new_lang = "ka" if lang_of(user_id) == "ru" else "ru"
    USER_LANG[user_id] = new_lang
    return new_lang

def read_contacts() -> Dict[str, Any]:
    try:
        data = json.loads(DATA_JSON.read_text(encoding="utf-8"))
        if not isinstance(data, dict):
            raise ValueError
        return {
            "phone": data.get("phone", "‚Äî"),
            "email": data.get("email", "‚Äî"),
            "address": data.get("address", "‚Äî"),
        }
    except Exception:
        return {"phone": "‚Äî", "email": "‚Äî", "address": "‚Äî"}

def make_main_kb(lang: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=LABELS["contacts"][lang])],
            [KeyboardButton(text=LABELS["lang"][lang])],
            [KeyboardButton(text=LABELS["back_channel"][lang])],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç..." if lang == "ru" else "·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éû·É£·Éú·É•·É¢·Éò...",
    )

router = Router()

# ====== –•–µ–Ω–¥–ª–µ—Ä–∏ ======

@router.message(CommandStart())
async def on_start(message: Message):
    uid = message.from_user.id
    # –ú–æ–≤–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º RU (–Ω–µ –º—ñ–Ω—è—î–º–æ, –ø–æ–∫–∏ —é–∑–µ—Ä –Ω–µ –Ω–∞—Ç–∏—Å–Ω–µ ¬´–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫¬ª)
    current = lang_of(uid)
    kb = make_main_kb(current)

    # 1) –ù–∞–¥—Å–∏–ª–∞—î–º–æ –±–∞–Ω–µ—Ä (—è–∫—â–æ —î)
    if BANNER_PATH.exists():
        await message.answer_photo(
            photo=BANNER_PATH.open("rb"),
            caption=TXT[current]["start_caption"]
        )
    else:
        await message.answer(TXT[current]["start_caption"])

    # 2) –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É (–ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–∞ –∑–Ω–∏–∑—É)
    await message.answer(" ", reply_markup=kb)

@router.message(Command("ping"))
async def on_ping(message: Message):
    await message.answer("pong")

@router.message(F.text.in_({LABELS["contacts"]["ru"], LABELS["contacts"]["ka"]}))
async def on_contacts(message: Message):
    uid = message.from_user.id
    current = lang_of(uid)
    t = TXT[current]
    info = read_contacts()
    text = (
        f"{t['contacts_title']}\n"
        f"‚Ä¢ {t['contacts_phone']}: {info['phone']}\n"
        f"‚Ä¢ {t['contacts_email']}: {info['email']}\n"
        f"‚Ä¢ {t['contacts_addr']}: {info['address']}"
    )
    await message.answer(text, reply_markup=make_main_kb(current))

@router.message(F.text.in_({LABELS["lang"]["ru"], LABELS["lang"]["ka"]}))
async def on_change_lang(message: Message):
    uid = message.from_user.id
    new_lang = toggle_lang(uid)
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è (—Ñ—Ä–∞–∑–∏ –Ω–∞–≤–º–∏—Å–Ω–µ ¬´–¥–∑–µ—Ä–∫–∞–ª—å–Ω—ñ¬ª)
    await message.answer(TXT[new_lang]["lang_switched"], reply_markup=make_main_kb(new_lang))

@router.message(F.text.in_({LABELS["back_channel"]["ru"], LABELS["back_channel"]["ka"]}))
async def on_back_to_channel(message: Message):
    uid = message.from_user.id
    current = lang_of(uid)
    if CHANNEL_URL:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=TXT[current]["open_channel"], url=CHANNEL_URL)]]
        )
        await message.answer(TXT[current]["open_channel"], reply_markup=kb)
    else:
        await message.answer(TXT[current]["no_channel"], reply_markup=make_main_kb(current))

# –ë—É–¥—å-—è–∫–∏–π —ñ–Ω—à–∏–π —Ç–µ–∫—Å—Ç ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ (–Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ)
# –ü—Ä–æ—Å—Ç–æ –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ fallback-—Ö–µ–Ω–¥–ª–µ—Ä.
# –Ø–∫—â–æ –¥—É–∂–µ —Ç—Ä–µ–±–∞ ¬´–∞–±—Å–æ–ª—é—Ç–Ω–∞ —Ç–∏—à–∞¬ª, –∑–∞–ª–∏—à–∞—î–º–æ —Ç–∞–∫.
# –Ø–∫—â–æ —Ö–æ—á–µ—à –ª–æ–≥–∏ ‚Äî —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π –Ω–∏–∂—á–µ:
# @router.message()
# async def _noop(_m: Message):
#     pass
