# -*- coding: utf-8 -*-
import json
import logging
from pathlib import Path

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# -------------------------------------------------------------------
# –í–°–¢–ê–í –°–í–û–á –î–ê–ù–Ü
# -------------------------------------------------------------------
BOT_TOKEN   = "–í–°–¢–ê–í_–°–í–Ü–ô_–¢–û–ö–ï–ù"         # —Ç–æ–∫–µ–Ω –≤—ñ–¥ BotFather
CHANNEL_URL = "https://t.me/your_channel" # –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–≤—ñ–π –∫–∞–Ω–∞–ª
# -------------------------------------------------------------------

logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
logger = logging.getLogger("bot")

BASE_DIR = Path(__file__).parent
DATA_FILE = BASE_DIR / "data.json"

# —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# ---------------- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ----------------
def main_menu() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"))
    kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª"))
    return kb

def back_inline_kb(url: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –∫–∞–Ω–∞–ª", url=url))
    return kb

# ---------------- –†–æ–±–æ—Ç–∞ –∑ data.json ----------------
def load_contacts() -> dict:
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.exception(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ {DATA_FILE}: {e}")
        return {"title": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "items": []}

def render_contacts_text(data: dict) -> str:
    lines = [f"<b>{data.get('title','–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è')}</b>", ""]
    for item in data.get("items", []):
        name = item.get("name", "")
        value = item.get("value", "")
        url = item.get("url")
        if not name and not value:
            continue
        if url:
            lines.append(f"‚Ä¢ <b>{name}:</b> <a href='{url}'>{value or url}</a>")
        else:
            if name.lower().startswith("—Ç–µ–ª") and value:
                lines.append(f"‚Ä¢ <b>{name}:</b> <a href='tel:{value}'>{value}</a>")
            else:
                lines.append(f"‚Ä¢ <b>{name}:</b> {value}")
    return "\n".join(lines)

# ---------------- –•–µ–Ω–¥–ª–µ—Ä–∏ ----------------
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üëá"
    )
    await message.answer(text, reply_markup=main_menu())

@dp.message_handler(lambda m: m.text and "–∫–æ–Ω—Ç–∞–∫—Ç" in m.text.lower())
async def show_contacts(message: types.Message):
    data = load_contacts()
    await message.answer(render_contacts_text(data), reply_markup=main_menu(), disable_web_page_preview=True)

@dp.message_handler(lambda m: m.text and "–Ω–∞–∑–∞–¥" in m.text.lower())
async def back_to_channel(message: types.Message):
    await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è —É –∫–∞–Ω–∞–ª:", reply_markup=back_inline_kb(CHANNEL_URL))

@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É üëá", reply_markup=main_menu())

# ---------------- –ó–∞–ø—É—Å–∫ ----------------
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π‚Ä¶")
    executor.start_polling(dp, skip_updates=True)
