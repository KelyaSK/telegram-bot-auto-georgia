# -*- coding: utf-8 -*-
import os
import json
import logging
from pathlib import Path

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# -------------------------------------------------------------------
# –í–ü–ò–®–ò –°–í–û–á –î–ê–ù–Ü –ù–ò–ñ–ß–ï (–∑–∞–ª–∏—à —É –ª–∞–ø–∫–∞—Ö)
# -------------------------------------------------------------------
BOT_TOKEN   = "–í–°–¢–ê–í_–°–í–Ü–ô_–¢–û–ö–ï–ù_–ó_BotFather"      # –Ω–∞–ø—Ä. 1234567890:AA... 
CHANNEL_URL = "https://t.me/your_channel_username" # –Ω–∞–ø—Ä. https://t.me/my_auto_channel
# -------------------------------------------------------------------

logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
BASE_DIR = Path(__file__).parent
DATA_FILE = BASE_DIR / "data.json"

# —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
if not BOT_TOKEN or BOT_TOKEN.strip() == "":
    raise SystemExit("–ù–µ –∑–∞–¥–∞–Ω–∏–π BOT_TOKEN —É bot.py. –í–ø–∏—à–∏ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω —É –∑–º—ñ–Ω–Ω—É BOT_TOKEN.")

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –¥–≤–æ–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"))
    kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª"))
    return kb

# inline-–∫–Ω–æ–ø–∫–∞ –∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–º —É –∫–∞–Ω–∞–ª
def back_inline_kb(url: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –∫–∞–Ω–∞–ª", url=url))
    return kb

# –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ —ñ–∑ data.json —â–æ—Ä–∞–∑—É (—â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É)
def load_contacts() -> dict:
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        # –æ—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç {"title": "...", "items": [ {name, value, url?}, ... ]}
        title = data.get("title", "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
        items = data.get("items", [])
        return {"title": title, "items": items}
    except Exception as e:
        logging.exception(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {DATA_FILE}: {e}")
        return {"title": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "items": []}

def render_contacts_text(data: dict) -> str:
    lines = [f"<b>{data['title']}</b>", ""]
    for it in data["items"]:
        name = it.get("name", "")
        value = it.get("value", "")
        url = it.get("url")
        if not name and not value:
            continue
        if url:
            lines.append(f"‚Ä¢ <b>{name}:</b> <a href='{url}'>{value or url}</a>")
        else:
            # —Ç–µ–ª–µ—Ñ–æ–Ω —É –≤–∏–≥–ª—è–¥—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è tel: —è–∫—â–æ —Å—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä
            if name.lower().startswith("—Ç–µ–ª") and value:
                lines.append(f"‚Ä¢ <b>{name}:</b> <a href='tel:{value}'>{value}</a>")
            else:
                lines.append(f"‚Ä¢ <b>{name}:</b> {value}")
    return "\n".join(lines)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üëá\n\n"
        "–ê–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –≤–Ω–∏–∑—É."
    )
    await message.answer(text, reply_markup=main_menu())

@dp.message_handler(lambda m: (m.text or "").strip().lower() in ["–∫–æ–Ω—Ç–∞–∫—Ç–∏", "üìû –∫–æ–Ω—Ç–∞–∫—Ç–∏", "–∫–æ–Ω—Ç–∞–∫—Ç—ã", "üìû –∫–æ–Ω—Ç–∞–∫—Ç—ã"])
async def show_contacts(message: types.Message):
    data = load_contacts()
    await message.answer(render_contacts_text(data), reply_markup=main_menu(), disable_web_page_preview=True)

@dp.message_handler(lambda m: "–Ω–∞–∑–∞–¥" in (m.text or "").lower())
async def back_to_channel(message: types.Message):
    link = CHANNEL_URL.strip() or "https://t.me/"
    await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è —É –∫–∞–Ω–∞–ª:", reply_markup=back_inline_kb(link))

@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å
