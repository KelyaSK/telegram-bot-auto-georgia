# bot.py
import json
import os
from pathlib import Path
from typing import Dict, Any

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from aiogram.types.input_file import FSInputFile  # –¥–ª—è —Ñ–æ—Ç–æ (aiogram 3)

# ---------- Files & ENV ----------
BASE_DIR = Path(__file__).parent
BANNER_PATH = BASE_DIR / "assets" / "banner.png"
DATA_JSON = BASE_DIR / "data.json"
CHANNEL_URL = os.getenv("CHANNEL_URL")  # –Ω–∞–ø—Ä.: https://t.me/your_channel

# –ü–∞–º‚Äô—è—Ç—å –º–æ–≤–∏ (–≤ RAM –Ω–∞ –ø—Ä–æ—Ü–µ—Å). –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'ru'.
USER_LANG: Dict[int, str] = {}

# ---------- –¢–µ–∫—Å—Ç–∏ RU/KA ----------
TXT = {
    "ru": {
        "start_caption": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ù–∞–∂–º–∏—Ç–µ ¬´/start¬ª –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ø–æ–º–æ—â—å –ø–æ –∞–≤—Ç–æ üöó",
        "menu_contacts": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "menu_lang": "üîÅ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "menu_back_channel": "üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª",

        "contacts_title": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:",
        "contacts_phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
        "contacts_email": "Email",
        "contacts_addr": "–ê–¥—Ä–µ—Å",

        "lang_prompt": "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        "lang_set_ru": "–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π üá∑üá∫",
        "lang_set_ka": "·Éî·Éú·Éê ·Éí·Éê·Éì·Éê·Éî·É†·Éó·Éù ·É•·Éê·É†·Éó·É£·Éö·Éñ·Éî üá¨üá™",

        "open_channel_text": "–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ! üì®",
        "open_channel_btn": "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª ‚ÜóÔ∏è",
        "no_channel": "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.",
        "placeholder": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç...",
    },
    "ka": {
        "start_caption": "üëã ·Éõ·Éù·Éí·Éî·É°·Éê·Éö·Éõ·Éî·Éë·Éò·Éó!\n·Éì·Éê·Éê·É≠·Éò·É†·Éî·Éó ¬´/start¬ª ·Éì·Éê ·Éõ·Éò·Éò·É¶·Éî·Éó ·Éô·Éù·Éú·É¢·Éê·É•·É¢·Éî·Éë·Éò ·Éì·Éê ·Éì·Éê·ÉÆ·Éõ·Éê·É†·Éî·Éë·Éê ·Éê·Éï·É¢·Éù·Éõ·Éù·Éë·Éò·Éö·Éî·Éë·Éñ·Éî üöó",
        "menu_contacts": "üìû ·Éô·Éù·Éú·É¢·Éê·É•·É¢·Éî·Éë·Éò",
        "menu_lang": "üîÅ ·Éî·Éú·Éò·É° ·É®·Éî·É™·Éï·Éö·Éê",
        "menu_back_channel": "üîô ·Éê·É†·ÉÆ·Éñ·Éî ·Éì·Éê·Éë·É†·É£·Éú·Éî·Éë·Éê",

        "contacts_title": "üìû ·Éô·Éù·Éú·É¢·Éê·É•·É¢·Éî·Éë·Éò:",
        "contacts_phone": "·É¢·Éî·Éö·Éî·É§·Éù·Éú·Éò",
        "contacts_email": "·Éò·Éõ·Éî·Éò·Éö·Éò",
        "contacts_addr": "·Éõ·Éò·É°·Éê·Éõ·Éê·É†·Éó·Éò",

        "lang_prompt": "üåê ·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éò·Éú·É¢·Éî·É†·É§·Éî·Éò·É°·Éò·É° ·Éî·Éú·Éê:",
        "lang_set_ru": "·Éî·Éú·Éê ·Éí·Éê·Éì·Éê·Éî·É†·Éó·Éù ·É†·É£·É°·É£·Éö·Éñ·Éî üá∑üá∫",
        "lang_set_ka": "·Éî·Éú·Éê ·Éí·Éê·Éì·Éê·Éî·É†·Éó·Éù ·É•·Éê·É†·Éó·É£·Éö·Éñ·Éî üá¨üá™",

        "open_channel_text": "·É°·Éò·ÉÆ·Éê·É†·É£·Éö·Éò·Éó ·Éì·Éê·Éí·Éò·Éú·Éê·ÉÆ·Éê·Éï·Éó ·É©·Éï·Éî·Éú·É° ·Éê·É†·ÉÆ·É®·Éò! üì®",
        "open_channel_btn": "·Éê·É†·ÉÆ·É®·Éò ·Éí·Éê·Éì·Éê·É°·Éï·Éö·Éê ‚ÜóÔ∏è",
        "no_channel": "·Éê·É†·ÉÆ·Éò·É° ·Éë·Éõ·É£·Éö·Éò ·ÉØ·Éî·É† ·Éê·É† ·Éê·É†·Éò·É° ·Éõ·Éò·Éó·Éò·Éó·Éî·Éë·É£·Éö·Éò.",
        "placeholder": "·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éû·É£·Éú·É•·É¢·Éò...",
    },
}

LABELS = {
    "contacts": {"ru": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "ka": "üìû ·Éô·Éù·Éú·É¢·Éê·É•·É¢·Éî·Éë·Éò"},
    "lang": {"ru": "üîÅ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "ka": "üîÅ ·Éî·Éú·Éò·É° ·É®·Éî·É™·Éï·Éö·Éê"},
    "back_channel": {"ru": "üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª", "ka": "üîô ·Éê·É†·ÉÆ·Éñ·Éî ·Éì·Éê·Éë·É†·É£·Éú·Éî·Éë·Éê"},
}

def lang_of(uid: int) -> str:
    return USER_LANG.get(uid, "ru")

def set_lang(uid: int, code: str) -> str:
    code = "ka" if code == "ka" else "ru"
    USER_LANG[uid] = code
    return code

def read_contacts() -> Dict[str, Any]:
    try:
        data = json.loads(DATA_JSON.read_text(encoding="utf-8"))
        if not isinstance(data, dict):
            raise ValueError
        return {
            "phone": data.get("phone", "‚Äî"),
            "email": data.get("email", "‚Äî"),
            "address": data.get("address", "‚Äî"),
        }
    except Exception:
        return {"phone": "‚Äî", "email": "‚Äî", "address": "‚Äî"}

def make_main_kb(lang: str) -> ReplyKeyboardMarkup:
    t = TXT[lang]
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=LABELS["contacts"][lang])],
            [KeyboardButton(text=LABELS["lang"][lang])],
            [KeyboardButton(text=LABELS["back_channel"][lang])],
        ],
        resize_keyboard=True,
        input_field_placeholder=t["placeholder"],
    )

def make_lang_choice_kb() -> InlineKeyboardMarkup:
    # –Ü–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="setlang:ru"),
                InlineKeyboardButton(text="·É•·Éê·É†·Éó·É£·Éö·Éò üá¨üá™", callback_data="setlang:ka"),
            ]
        ]
    )

router = Router()

# ---------- Handlers ----------

@router.message(CommandStart())
async def on_start(message: Message):
    uid = message.from_user.id
    lang = lang_of(uid)
    kb = make_main_kb(lang)

    # –ë–∞–Ω–µ—Ä + –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    if BANNER_PATH.exists():
        photo = FSInputFile(str(BANNER_PATH))
        await message.answer_photo(photo=photo, caption=TXT[lang]["start_caption"], reply_markup=kb)
    else:
        await message.answer(TXT[lang]["start_caption"], reply_markup=kb)

@router.message(Command("ping"))
async def on_ping(message: Message):
    await message.answer("pong")

@router.message(F.text.in_({LABELS["contacts"]["ru"], LABELS["contacts"]["ka"]}))
async def on_contacts(message: Message):
    uid = message.from_user.id
    lang = lang_of(uid)
    t = TXT[lang]
    c = read_contacts()
    text = (
        f"{t['contacts_title']}\n"
        f"‚Ä¢ {t['contacts_phone']}: {c['phone']}\n"
        f"‚Ä¢ {t['contacts_email']}: {c['email']}\n"
        f"‚Ä¢ {t['contacts_addr']}: {c['address']}"
    )
    await message.answer(text, reply_markup=make_main_kb(lang))

# –ë—ã–ª–æ: –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ. –°—Ç–∞–ª–æ: –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (inline).
@router.message(F.text.in_({LABELS["lang"]["ru"], LABELS["lang"]["ka"]}))
async def on_change_lang(message: Message):
    uid = message.from_user.id
    lang = lang_of(uid)
    await message.answer(TXT[lang]["lang_prompt"], reply_markup=make_lang_choice_kb())

@router.callback_query(F.data.startswith("setlang:"))
async def on_set_lang(call: CallbackQuery):
    uid = call.from_user.id
    _, code = call.data.split(":", 1)
    new_lang = set_lang(uid, code)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ + –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    text = TXT[new_lang]["lang_set_ru"] if new_lang == "ru" else TXT[new_lang]["lang_set_ka"]
    await call.message.answer(text, reply_markup=make_main_kb(new_lang))
    await call.answer()

@router.message(F.text.in_({LABELS["back_channel"]["ru"], LABELS["back_channel"]["ka"]}))
async def on_back_channel(message: Message):
    lang = lang_of(message.from_user.id)
    if CHANNEL_URL:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=TXT[lang]["open_channel_btn"], url=CHANNEL_URL)]]
        )
        await message.answer(TXT[lang]["open_channel_text"], reply_markup=kb)
    else:
        await message.answer(TXT[lang]["no_channel"], reply_markup=make_main_kb(lang))

# –Ü–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –ø–æ–≤–Ω–∞ —Ç–∏—à–∞
@router.message()
async def _noop(_msg: Message):
    pass
