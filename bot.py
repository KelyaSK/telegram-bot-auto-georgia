# -*- coding: utf-8 -*-
import os
import json
import asyncio
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types.input_file import FSInputFile, BufferedInputFile

import aiohttp
from aiohttp import web
from dotenv import load_dotenv

# ---------------------- ENV ----------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_URL = os.getenv("CHANNEL_URL", "https://t.me/your_channel")

# –ú–æ–∂–µ—à –≤–∫–∞–∑–∞—Ç–∏ —Å–≤—ñ–π —à–ª—è—Ö/URL —É Render ‚Üí Environment (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)
START_IMAGE_PATH = Path(os.getenv("START_IMAGE_PATH", "assets/Frame81.png"))
START_IMAGE_URL  = os.getenv("START_IMAGE_URL", "https://i.imgur.com/3ZQ3ZyK.png")

if not BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

# ---------------------- BOT ----------------------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ---------------------- UI ----------------------
def main_menu(lang="ru"):
    kb = ReplyKeyboardBuilder()
    if lang == "ka":
        kb.button(text="üìû ·Éô·Éù·Éú·É¢·Éê·É•·É¢·Éî·Éë·Éò")
        kb.button(text="üîô ·Éê·É†·ÉÆ·Éñ·Éî ·Éì·Éê·Éë·É†·É£·Éú·Éî·Éë·Éê")
    else:
        kb.button(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        kb.button(text="üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª")
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)

def back_inline_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)]]
    )

# ---------------------- DATA ----------------------
def load_contacts_raw() -> dict:
    try:
        with open("data.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            return data if isinstance(data, dict) else {}
    except FileNotFoundError:
        print(f"‚ö†Ô∏è data.json –Ω–µ –Ω–∞–π–¥–µ–Ω. cwd={os.getcwd()}")
        return {}
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è data.json: {e}")
        return {}

def render_contacts_text(data: dict) -> str:
    # —Ñ–æ—Ä–º–∞—Ç 2: {"title": "...", "items":[{"name": "...", "value": "...", "url": "..."}]}
    if isinstance(data.get("items"), list):
        title = str(data.get("title") or "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        lines = [f"<b>{title}</b>", ""]
        for it in data["items"]:
            name = str(it.get("name", "")).strip()
            value = str(it.get("value", "")).strip()
            url = str(it.get("url", "")).strip() if it.get("url") else ""
            if not name and not value and not url:
                continue
            line = f"‚Ä¢ <b>{name}:</b> "
            line += f"<a href='{url}'>{value or url}</a>" if url else (value or "‚Äî")
            lines.append(line)
        return "\n".join(lines) if len(lines) > 2 else "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã."

    # —Ñ–æ—Ä–º–∞—Ç 1: –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è
    phone   = data.get("phone", "‚Äî")
    email   = data.get("email", "‚Äî")
    address = data.get("address", "‚Äî")
    return (f"‚òéÔ∏è <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"‚úâÔ∏è <b>Email:</b> {email}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address}")

# ---------------------- IMAGE HELPERS ----------------------
async def send_start_image(message: Message, caption: str):
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è Render
    print(f"üñº cwd={os.getcwd()}")
    assets_dir = Path("assets")
    print(f"üñº assets exists={assets_dir.exists()} contents={list(assets_dir.iterdir()) if assets_dir.exists() else 'N/A'}")
    print(f"üñº START_IMAGE_PATH={START_IMAGE_PATH.resolve()} exists={START_IMAGE_PATH.exists()}")

    # 1) –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    if START_IMAGE_PATH.exists() and START_IMAGE_PATH.is_file():
        try:
            photo = FSInputFile(START_IMAGE_PATH)
            await message.answer_photo(photo=photo, caption=caption, reply_markup=main_menu("ru"))
            return
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

    # 2) —Å–∫–∞—á–∞—Ç—å –ø–æ URL –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –±—É—Ñ–µ—Ä (—á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ URL)
    try:
        async with aiohttp.ClientSession() as sess:
            async with sess.get(START_IMAGE_URL, timeout=20) as resp:
                if resp.status == 200:
                    data = await resp.read()
                    buf = BufferedInputFile(data, filename="start.jpg")
                    await message.answer_photo(photo=buf, caption=caption, reply_markup=main_menu("ru"))
                    return
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å START_IMAGE_URL. HTTP {resp.status}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ URL: {e}")

    # 3) –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã—à–ª–æ
    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", reply_markup=main_menu("ru"))

# ---------------------- HANDLERS ----------------------
@dp.message(Command("start"))
async def start_cmd(message: Message):
    caption = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ù–∞–∂–º–∏—Ç–µ ¬´/start¬ª –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ø–æ–º–æ—â—å –ø–æ –∞–≤—Ç–æ üöò"
    await send_start_image(message, caption)

@dp.message(F.text.in_(["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üìû ·Éô·Éù·Éú·É¢·Éê·É•·É¢·Éî·Éë·Éò"]))
async def show_contacts(message: Message):
    text = render_contacts_text(load_contacts_raw())
    await message.answer(text, reply_markup=main_menu("ru"))

@dp.message(F.text.in_(["üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–Ω–∞–ª", "üîô ·Éê·É†·ÉÆ·Éñ·Éî ·Éì·Éê·Éë·É†·É£·Éú·Éî·Éë·Éê"]))
async def back_to_channel(message: Message):
    await message.answer("‚Ü©Ô∏è –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–∞–Ω–∞–ª –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:", reply_markup=back_inline_kb())

# ---------------------- Healthcheck (Render free Web Service) ----------------------
async def healthcheck(request):
    return web.Response(text="‚úÖ Bot is running")

async def start_web_app():
    app = web.Application()
    app.router.add_get("/", healthcheck)
    port = int(os.environ.get("PORT", 10000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    print(f"üåç Web server running on port {port}")

# ---------------------- RUN ----------------------
async def main():
    # –º–∞–ª–µ–Ω—å–∫–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    asyncio.create_task(start_web_app())

    # –±–æ—Ç
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("ü§ñ Bot starting...")
    asyncio.run(main())
